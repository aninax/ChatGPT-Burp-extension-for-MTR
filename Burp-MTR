from java.io import BufferedReader, InputStreamReader
from java.lang import Runtime
from burp import IBurpExtender
from burp import IHttpRequestResponse
from burp import IScannerInsertionPointProvider

class BurpExtender(IBurpExtender):

    def registerExtenderCallbacks(self, callbacks):
        self._callbacks = callbacks
        self._helpers = callbacks.getHelpers()
        self._callbacks.setExtensionName("MTR Tool")

        callbacks.registerScannerInsertionPointProvider(CustomScannerInsertionPointProvider())

class CustomScannerInsertionPointProvider(IScannerInsertionPointProvider):
    def __init__(self):
        self.target_hosts = []

    def getInsertionPoints(self, baseRequestResponse):
        self.target_hosts = self.fetch_scope()
        insertion_points = []
        for host in self.target_hosts:
            insertion_points.append(CustomInsertionPoint(baseRequestResponse, host))
        return insertion_points

    def fetch_scope(self):
        http_traffic = self._callbacks.getProxyHistory()
        target_hosts = set()
        for traffic in http_traffic:
            request_info = self._helpers.analyzeRequest(traffic)
            url = request_info.getUrl()
            target_hosts.add(url.getHost())
        return list(target_hosts)

class CustomInsertionPoint:
    def __init__(self, baseRequestResponse, target_host):
        self._baseRequestResponse = baseRequestResponse
        self._target_host = target_host

    def buildRequest(self, payload):
        mtr(self._target_host)

def mtr(target_host):
    print "MTR Results for: ", target_host
    print "--------------------------------------"

    try:
        process_ping = Runtime.getRuntime().exec("ping -c 1 " + target_host)
        ping_reader = BufferedReader(InputStreamReader(process_ping.getInputStream()))
        ping_line = ping_reader.readLine()

        if "0 received" in ping_line:
            print "Ping to", target_host, "failed."
            return

        for ttl in range(1, 31):
            print "TTL=", ttl, "\t"
            process_traceroute = Runtime.getRuntime().exec("traceroute -n -m " + str(ttl) + " " + target_host)
            traceroute_reader = BufferedReader(InputStreamReader(process_traceroute.getInputStream()))
            traceroute_line = traceroute_reader.readLine()

            while traceroute_line:
                print traceroute_line
                traceroute_line = traceroute_reader.readLine()

    except Exception, e:
        print "Error: ", e

# Instantiate the BurpExtender
if __name__ == "__main__":
    BurpExtender()
